class Solution {
public:
     ListNode* getMiddle(ListNode* &head,ListNode* &midprev)
     {
          ListNode* slow=head;
        ListNode* fast=head;
        while(fast!=NULL)
        {
            fast=fast->next;
        if(fast!=NULL)
         fast=fast->next;
         midprev=slow;
         slow=slow->next;
        }
        return slow;
     }
  ListNode*  reverseList(ListNode* &prev,ListNode* &curr)
  {while(curr!=NULL)
  {
      ListNode*  forward=curr->next;
      curr->next=prev;
      prev=curr;
      curr=forward;
  }
       return prev;
  }
    bool isPalindrome(ListNode* head) {
        if(head==NULL)
        { return true;  }
        if(head->next==NULL)
        {
             //single node
              return true;
        }
        ListNode* firsthead=head;
        ListNode* midprev=NULL;
        ListNode* middleNode=getMiddle(head,midprev);
        //break
        midprev->next=NULL;
        //reverse the second half
        ListNode* prev=NULL;
        ListNode*curr=middleNode;
       ListNode* secondhead= reverseList(prev,curr);
 ListNode* tempHead1=firsthead;
 ListNode* tempHead2=secondhead;
 while(tempHead2!=NULL)
 {  
    if(tempHead1->val!= tempHead2->val)
    {
        //not a p
        return false;
    }
    else 
    {
         tempHead1=tempHead1->next;
            tempHead2=tempHead2->next;
    }
 }   
        return true;
    }
};
